<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>win = true;
zoom = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_wview[0] = room_width * zoom;
view_hview[0] = room_height * zoom;

view_xview[0] = x - view_wview / 2;
view_yview[0] = y - view_hview / 2;
/*
if(win &amp;&amp; instance_exists(obj_player)) {
    x += obj_player.x / 25;
    y += obj_player.y / 25;
}*/

if mouse_check_button(mb_right)
    {
    // Points towards the mouse
    direction = point_direction(x, y, mouse_x, mouse_y)
    // Finds the distance from the camera object to the mouse, then divides it by (10 * zoom) so that the camera pan speed stays reasonable
    speed = distance_to_point(mouse_x, mouse_y) / (10 * zoom)
    }
else speed = 0

if keyboard_check(ord("W"))  zoom += 0.05
if keyboard_check(ord("S"))  zoom  -= 0.05
/*
view_xview = clamp(view_xview, 0, room_width - view_xview);
view_yview = clamp(view_yview, 0, room_height - view_yview);



/*var xTo, yTo;

move_towards_point(obj_dB.x - room_width / 2, obj_dB.y - room_height / 2, 0);

x += (obj_dB.x - x) / 25;
y += (obj_dB.y - y) / 25;

view_xview = -(view_wview / 2) + x;
view_yview = -(view_hview / 2) + y;

view_xview = clamp(view_xview, 0, room_width - view_xview);
view_yview = clamp(view_yview, 0, room_height - view_yview);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
